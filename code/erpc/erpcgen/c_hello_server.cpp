/* 定义项目名称,也是所有生成的源码文件名前缀 */

/*
 * Generated by erpcgen 1.13.0 on Mon Feb 10 20:01:52 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include <new>
#include "c_hello_server.h"
#include "hello_server.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


class DEMO_server: public DEMO_interface
{
    public:
        virtual ~DEMO_server() {};


        void hello_world(void)
        {
            ::hello_world();
        }

        void say_message(const char * msg)
        {
            ::say_message(msg);
        }

        int32_t erpc_add(int32_t data1, int32_t data2)
        {
            int32_t result;
            result = ::erpc_add(data1, data2);

            return result;
        }
};

ERPC_MANUALLY_CONSTRUCTED_STATIC(DEMO_service, s_DEMO_service);
ERPC_MANUALLY_CONSTRUCTED_STATIC(DEMO_server, s_DEMO_server);

erpc_service_t create_DEMO_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) DEMO_service(new (nothrow)DEMO_server());
#else
    if (s_DEMO_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_DEMO_server.construct();
        s_DEMO_service.construct(s_DEMO_server.get());
        service = s_DEMO_service.get();
    }
#endif

    return service;
}

void destroy_DEMO_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (service)
    {
        delete (DEMO_server *)(((DEMO_service *)service)->getHandler());
        delete (DEMO_service *)service;
    }
#else
    (void)service;
    erpc_assert(service == s_DEMO_service.get());
    s_DEMO_service.destroy();
    s_DEMO_server.destroy();
#endif
}

