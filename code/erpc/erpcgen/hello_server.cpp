/* 定义项目名称,也是所有生成的源码文件名前缀 */

/*
 * Generated by erpcgen 1.13.0 on Mon Feb 10 20:01:52 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "hello_server.hpp"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11300 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;
using namespace erpcShim;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif



DEMO_service::DEMO_service(DEMO_interface *_DEMO_interface)
    : erpc::Service(DEMO_interface::m_serviceId)
    , m_handler(_DEMO_interface)
{
}

DEMO_service::~DEMO_service()
{
}

// return service interface handler.
DEMO_interface* DEMO_service::getHandler(void)
{
    return m_handler;
}

// Call the correct server shim based on method unique ID.
erpc_status_t DEMO_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory, Transport * transport)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case DEMO_interface::m_hello_worldId:
        {
            erpcStatus = hello_world_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case DEMO_interface::m_say_messageId:
        {
            erpcStatus = say_message_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case DEMO_interface::m_erpc_addId:
        {
            erpcStatus = erpc_add_shim(codec, messageFactory, transport, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for hello_world of DEMO interface.
erpc_status_t DEMO_service::hello_world_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;


    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->hello_world();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, DEMO_interface::m_serviceId, DEMO_interface::m_hello_worldId, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for say_message of DEMO interface.
erpc_status_t DEMO_service::say_message_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    char * msg = NULL;

    // startReadMessage() was already called before this shim was invoked.

    {
        uint32_t msg_len;
        char * msg_local;
        codec->readString(msg_len, &msg_local);
        msg = (char*) erpc_malloc((msg_len + 1) * sizeof(char));
        if ((msg == NULL) || (msg_local == NULL))
        {
            codec->updateStatus(kErpcStatus_MemoryError);
        }
        else
        {
            memcpy(msg, msg_local, msg_len);
            (msg)[msg_len] = 0;
        }
    }

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->say_message(msg);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, DEMO_interface::m_serviceId, DEMO_interface::m_say_messageId, sequence);

        err = codec->getStatus();
    }

    erpc_free(msg);

    return err;
}

// Server shim for erpc_add of DEMO interface.
erpc_status_t DEMO_service::erpc_add_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t data1;
    int32_t data2;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(data1);

    codec->read(data2);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->erpc_add(data1, data2);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, DEMO_interface::m_serviceId, DEMO_interface::m_erpc_addId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}
